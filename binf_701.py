# -*- coding: utf-8 -*-
"""BINF 701

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o-28gL2mcnGJJ1waM1OZH6zm6KGOKzmT
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 11 14:51:56 2021

@author: aullah3
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt



# Initial number values
x0 = 1.0          #Initial value of x
q0 = 1.0          #; % Initial value of y
z0 = 1.0          #; % Initial value of z

# Contact rate,

a,b,c, enzyme = 1.0,1.0,1.0,1.0
m = 1.#sym.Rational(1, 2)
#drop =1

# A grid of time points 

t = np.linspace(0, 30, 30)

  
# The differential equations.

def deriv(y, t, a,b,c,m,enzyme):
    x, q, z = y
    
    if t<10.0:
        signal = 1.0
    else: 
        signal = 0.75
        
        

        
    
    dxdt = signal-a*enzyme*x**m
    dqdt = a*enzyme*x**m-b*q**m
    dzdt = b*q**m-c*z**m


    return dxdt, dqdt, dzdt

# Initial conditions vector
y0 = x0,q0,z0,
# Integrate the equations

ret = odeint(deriv, y0, t, args=(a,b,c,m,enzyme))

x, q, z = ret.T

# Plot the data on three separate curves X,y,Z
fig = plt.figure(facecolor='w')
ax = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)
ax.plot(t, x, 'b', alpha=0.5, lw=2, label='X')
ax.plot(t, q, 'r', alpha=0.5, lw=2, label='Y')
ax.plot(t, z, 'g', alpha=0.5, lw=2, label='Z')

ax.set_xlabel('Time')
ax.set_ylabel('Concentration')
#ax.set_ylim(0,5)
ax.yaxis.set_tick_params(length=0)
ax.xaxis.set_tick_params(length=0)
ax.grid(b=True, which='major', c='w', lw=2, ls='-')
legend = ax.legend()
legend.get_frame().set_alpha(0.5)
for spine in ('top', 'right', 'bottom', 'left'):
    ax.spines[spine].set_visible(False)
plt.show()

!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Oct 11 14:51:56 2021

@author: aullah3
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import sympy as sym




# Initial number values
x0 = 1.0          #Initial value of x
q0 = 1.0          #; % Initial value of y
z0 = 1.0          #; % Initial value of z

# added this code
TF0 = 1.0
G0 = 1.0
E0 = 1.0 # i don't know what to do with the enzyme

# Contact rate,
#removed enzyme
a,b,c  = 1.0,1.0,1.0

#change m to 0.5
#m = sym.Rational(1, 2)
#m= 1
#drop =1

# A grid of time points 

t = np.linspace(0, 100, 100) # change it to 100 

  
# The differential equations.

def deriv(y, t, a,b,c): #removed m
    #added TF and G
    
    x, q, z, TF, G, enzyme = y
    
    if t<10.0:
        signal = 1.0
    else: 
        signal = 0.75
        
        

        
    
    dxdt = signal-a*enzyme*x**1
    dqdt = a*enzyme*x**1-b*q**1
    dzdt = b*q**1-c*z**1

    #added code

    dTFdt = z**0.0 - TF**0.5
    dGdt = TF**0.5 - G**0.5
    dEdt = G**0.5 - enzyme**0.5

# changed code here as well
    return dxdt, dqdt, dzdt, dTFdt, dGdt, dEdt

# Initial conditions vector
# added code here TF0 and G0
y0 = x0,q0,z0, TF0 , G0, E0
# Integrate the equations

#removed enzyme
ret = odeint(deriv, y0, t, args=(a,b,c)) #reomoved m

# added TF and G enzyme
x, q, z, TF, G, enzyme = ret.T

# Plot the data on three separate curves X,y,Z
fig = plt.figure(facecolor='w')
ax = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)
ax.plot(t, x, 'b', alpha=0.5, lw=2, label='X')
ax.plot(t, q, 'r', alpha=0.5, lw=2, label='Y')
ax.plot(t, z, 'g', alpha=0.5, lw=2, label='Z')

#added code to the plot here
ax.plot(t, TF, 'm', alpha=0.5, lw=2, label='TF')
ax.plot(t, G, 'y', alpha=0.5, lw=2, label='G')
ax.plot(t, enzyme, 'k', alpha=0.5, lw=2, label='enzyme')


ax.set_xlabel('Time')
ax.set_ylabel('Concentration')
#ax.set_ylim(0,5)
ax.yaxis.set_tick_params(length=0)
ax.xaxis.set_tick_params(length=0)
ax.grid(b=True, which='major', c='w', lw=2, ls='-')
legend = ax.legend()
legend.get_frame().set_alpha(0.5)
for spine in ('top', 'right', 'bottom', 'left'):
    ax.spines[spine].set_visible(False)
plt.show()

m = 0.5 #sym.Rational(1, 2)

print(m)

"""I am trying to figure out the correct m

0.5 doesn't work- it flat lines
2 is opposite
1 is what gives something a little bit similar

let me try 0.2

revert all rates back to 1.0
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 30 09:25:09 2021

@author: aullah3
"""

# -*- coding: utf-8 -*-
#Spyder Editor
#This is a temporary script file.
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import math

# Initial number of, x0 and y0.
x0, y0 = 0.9, 0.4
beta, gamma = 0.4645, 0.565 
t = np.linspace(0, 500,500)

# The differential equations.
def deriv(m, t, beta, gamma):
    x, y = m
    dxdt = y 
    dydt = x-x**3-gamma*y+beta*math.sin(t)
    return dxdt, dydt

# Initial conditions vector
m0 = x0, y0
# Integrate the x,y equations over the time grid, t.
ret = odeint(deriv, m0, t, args=(beta,gamma))
#ret = odeint(deriv, y0, t, args=(N, beta, gamma))
x, y = ret.T

# Plot the data on two separate curves for x(t) and y(t)
fig = plt.figure(facecolor='w')
ax = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)
ax.plot(t, x, 'b', alpha=0.5, lw=2, label='x')
#ax.plot(t, y, 'r', alpha=0.5, lw=2, label='Infected')
ax.set_xlabel('Time')
ax.set_ylabel('x')
ax.set_ylim(-2,1.5)
ax.yaxis.set_tick_params(length=0)
ax.xaxis.set_tick_params(length=0)
ax.grid(b=True, which='major', c='w', lw=2, ls='-')
legend = ax.legend()
legend.get_frame().set_alpha(0.5)
for spine in ('top', 'right', 'bottom', 'left'):
    ax.spines[spine].set_visible(False)
plt.show()



#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 30 09:25:09 2021

@author: aullah3
"""

# -*- coding: utf-8 -*-
#Spyder Editor
#This is a temporary script file.
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import math

# Initial number of, x0 and y0.
x0, y0 = 0.90, 0.40 #(x0 = 0.901 D)
beta, gamma = 0.2643, 0.24716   #0.2645, 0.24716(B,D) 
t = np.linspace(0, 500,500)

# The differential equations.
def deriv(m, t, beta, gamma):
    x, y = m
    dxdt = y 
    dydt = x-x**3-gamma*y+beta*math.sin(t)
    return dxdt, dydt

# Initial conditions vector
m0 = x0, y0
# Integrate the x,y equations over the time grid, t.
ret = odeint(deriv, m0, t, args=(beta,gamma))
#ret = odeint(deriv, y0, t, args=(N, beta, gamma))
x, y = ret.T

# Plot the data on two separate curves for x(t) and y(t)
fig = plt.figure(facecolor='w')
ax = fig.add_subplot(111, facecolor='#dddddd', axisbelow=True)
ax.plot(t, x, 'b', alpha=0.5, lw=2, label='x')
#ax.plot(t, y, 'r', alpha=0.5, lw=2, label='Infected')
ax.set_xlabel('Time')
ax.set_ylabel('x')
ax.set_ylim(-2,2)
ax.yaxis.set_tick_params(length=0)
ax.xaxis.set_tick_params(length=0)
ax.grid(b=True, which='major', c='w', lw=2, ls='-')
legend = ax.legend()
legend.get_frame().set_alpha(2.0)
for spine in ('top', 'right', 'bottom', 'left'):
    ax.spines[spine].set_visible(False)
plt.show()

"""https://ntumitolab.github.io/mmsb-bebi-5009-python/ode.html

"""